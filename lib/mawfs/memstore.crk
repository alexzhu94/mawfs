# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## A NodeStore implemented in memory.  This is mainly useful for testing.

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.hash.sha256 SHA256;
import crack.io StringWriter;
import crack.protobuf Message, ProtoWriter;
import mawfs.blockstore Commit, Node, NodeStore;

@import crack.ann impl;

## A NodeStore implemented entirely in memory.
class MemNodeStore @impl NodeStore {
    HashMap[String, Node] __nodes = {};
    HashMap[String, Commit] __commits = {};
    HashMap[String, Array[String]] __journal = {};
    HashMap[String, String] __branches = {};
    String __root;

    String __digest(Message message) {
        # Construct a digest from the object contents.
        StringWriter temp = {};
        ProtoWriter pw = {temp};
        message.serialize(pw);
        hasher := SHA256();
        hasher.update(temp.string());
        return hasher.digest();
    }

    String storeNode(Node node) {
        __nodes[result := __digest(node)] = node;
        return result;
    }

    Node getNode(String digest) {
        return __nodes.get(digest);
    }

    String storeCommit(Commit commit) {
        __commits[result := __digest(commit)] = commit;
        return result;
    }

    Commit getCommit(String digest) {
        return __commits.get(digest);
    }

    Node getRoot() {
        return getNode(__root);
    }

    String getRootDigest() {
        return __root;
    }

    void storeRoot(String digest) {
        __root = digest;
    }

    void setHead(String branch, String head) {
        __branches[branch] = head;
    }

    String getHead(String branch) {
        return __branches.get(branch);
    }

    void writeToJournal(String digest, String contents) {
        arr := __journal.get(digest);
        if (!arr)
            __journal[digest] = arr = Array[String]();
        arr.append(contents);
    }

    Array[String] getJournalEntries(String digest) {
        return __journal.get(digest);
    }

    void deleteJournal(String digest) {
        if (__journal.hasKey(digest))
            __journal.delete(digest);
    }
}

