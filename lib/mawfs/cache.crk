# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## The node cache.
module;

import crack.ascii hex;
import crack.cont.hashmap HashMap;
import crack.io.fmtutil Indenter;
import crack.io Formatter, FStr;
import crack.cont.array Array;
import crack.lang cmp, AppendBuffer, AssertionError, Buffer, Exception,
    KeyError, ManagedBuffer, WriteBuffer, makeHashVal;
import crack.logger debug, error;
import crack.protobuf readMessageFromString, Field, Message, ProtoWriter;
import mawfs.blockstore Entry, Node, NodeStore, MODE_DIR;

@import crack.ann assert, impl;
@import crack.protobuf.ann protobuf;

# Allow initial blocks of up to one meg.
const DEFAULT_MAX_CONTENT_SIZE := 1024 * 1024;

const int32
    ## Add child (contains a Node and a name)
    CHANGE_ADD_CHILD = 1,

    ## Delete a child (contains a name).
    CHANGE_DELETE_CHILD = 2,

    ## Make a change to a nested child.  Contains a 'name' (the name of the
    ## child) and the 'nested' field containing the change to be applied to
    ## that child.
    CHANGE_NESTED = 3,

    ## Write data to node contents (respecting all current rules about file
    ## size, layout etc).  Contains pos and data.
    CHANGE_WRITE = 4,

    ## Resize node contents.  Contains newSize.
    CHANGE_RESIZE = 5;

@protobuf {
    declare Node;

    message Change {
        ## Types are the CHANGE_* constants.
        required int32 type = 1;

        ## Child name.
        optional string name = 2;

        ## Node to be added.
        optional Node node = 3;

        ## Change to be applied to a nested child (should be another Changes
        ## message).
        optional bytes nested = 4;

        ## Position to insert data into for a write.
        optional int32 pos = 5;

        ## Data to be inserted in a write.
        optional bytes data = 6;

        ## New size of the node for a resize.
        optional int32 newSize = 7;
    }
}

class Cache {
    NodeStore store;

    uint maxContentSize = DEFAULT_MAX_CONTENT_SIZE;

    oper init(NodeStore store) : store = store {}

    @final void addChange(String digest, Change change) {
        store.writeToJournal(digest, change.toString());
    }

    @final String storeNode(Node node) {
        return store.storeNode(node);
    }

    @final Node getNode(String digest) {
        return store.getNode(digest);
    }

    @final void clearJournal(String digest) {
        store.deleteJournal(digest);
    }

    @final Array[Change] getJournalEntries(String digest) {
        # Get changes for the node if there are any.
        unparsedChanges := store.getJournalEntries(digest);
        if (!unparsedChanges)
            return null;

        Array[Change] changes = {};
        for (serializedChange :in unparsedChanges) {
            Change parsedChange = {};
            readMessageFromString(parsedChange, serializedChange);
            changes.append(parsedChange);
        }
        return changes;
    }
}

class CachedNode;

## Returns an up-to-date (i.e. the journal has been replayed) cached node
## from the cache.
CachedNode _getCachedNode(Cache cache, String digest);

class CachedNode {
    Cache __cache;

    String digest;
    Node node;
    bool dirty;

    ## The parent node (the directory that this node is in).
    CachedNode parent;

    ## Gets the node's mode.
    @final int getMode() {
        return node.mode;
    }

    @final bool isDir() {
        return node.mode & MODE_DIR;
    }

    class CachedEntry {
        Entry entry;
        Cache __cache;
        CachedNode node;

        oper init(Cache cache, Entry entry) :
            entry = entry,
            __cache = cache {
        }

        oper init(Entry entry, CachedNode node) : entry = entry, node = node {
            # We shouldn't really need the cache if we've already got the
            # node, but this gives us a clean invariant.
            __cache = node.__cache;
        }

        @final String getName() {
            return entry.name;
        }

        @final String getDigest() {
            return entry.hash;
        }

        @final void setDigest(String digest) {
            entry.hash = digest;
        }

        @final uint64 getSize() {
            return uint64(entry.size);
        }

        ## Returns the node referenced by this child object.
        @final CachedNode getNode() {
            # Lazy load the node.
            if (!node)
                node = _getCachedNode(__cache, entry.hash);
            return node;
        }

        @final int getMode() {
            return getNode().getMode();
        }
    }

    ## A list of children sorted by name.  Retrieval/insertion by name is
    ## supported.
    ## node.children must exist for this to be created.
    class __ChildArray : Array[CachedEntry] {

        # Underlying representation.
        Array[Entry] __rep;

        oper init(Array[Entry] rep) :
            Array[CachedEntry](rep.count(), null),
            __rep = rep {
        }

        ## Recursive helper for __findIndex(String).
        @final int __findIndex(String name, uint start, uint end) {

            if (!count())
                return -1;

            uint midpoint = (end - start) / 2 + start;
            if (midpoint == start) {
                comparison := cmp(name, this[midpoint].getName());
                if (comparison == 0)
                    return start;
                else if (comparison < 0)
                    return -(start + 1);
                else
                    return -(end + 1);
            }

            if (name == this[midpoint].getName())
                return midpoint;

            if (name < this[midpoint].getName())
                return __findIndex(name, start, midpoint);
            else
                return __findIndex(name, midpoint, end);
        }

        ## Find the index of the child with the given name.  If there is no
        ## match in the array, returns the
        ## negative index + 1 of where the element would be (so if it belonged
        ## at index 0, we would return -1).  Returns the index of the element
        ## if it was found as an ordinary positive integer.
        @final int findIndex(String name) {
            return __findIndex(name, 0, count());
        }

        ## Return the entry identified by the name, null if it doesn't exist.
        @final CachedEntry get(String name) {
            i := __findIndex(name, 0, count());
            if (i < 0)
                return null;
            else
                return this[i];
        }

        @final void add(CachedEntry entry) {
            i := findIndex(entry.getName());
            if (i >= 0) {
                this[i] = entry;
                __rep[i] = entry.entry;
            } else {
                insert(-i - 1, entry);
                __rep.insert(-i - 1, entry.entry);
            }
        }

        @final bool delete(String name) {
            i := findIndex(name);
            if (i >= 0) {
                this.delete(i);
                __rep.delete(i);
                return true;
            } else {
                return false;
            }
        }

        void formatTo(Formatter out) {
            indent := Indenter.wrap(out);
            out `CachedEntries![\n`;
            for (child :in this) {
                dig := child.getDigest();
                String digest;
                if (dig)
                    digest := hex(dig);
                out I`$(child.getName().getRepr()):\n`;
                ++indent;
                out I`digest: $(digest ? hex(digest) : 'null')
                      node: `;
                out `$(child.node)\n`;
                --indent;
            }
            out `]`;
        }
    }

    # A sparse-array version of Node.children.  These get filled in as they
    # are accessed.
    __ChildArray __children;

    ## digest should be null for a new node.
    oper init(Cache cache, String digest, Node node) :
        __cache = cache,
        digest = digest,
        node = node,
        dirty = !digest {
    }

    ## Allocate __children array to mirror the values in node.children.
    ## Creates node.children if it doesn't exist.
    @final void __makeChildren() {
        # First make sure we have node.children.
        if (!node.children)
            node.children = Array[Entry]();

        # Create an array of children to mirror that of node.children,
        # initialize all elements to null.
        __children = __ChildArray(node.children);
    }

    ## Allocate the __children scaffold and populate with the child entries
    ## from the node.
    ## If createEmpty is true, create the scaffold even if node.children is
    ## null, and also create an empty node.children.
    ## If createEmpty is false and children is null or empty, do nothing and
    ## return false.
    ## Return true if the scaffold exists, false if not.
    @final bool __populateChildren(bool createEmpty) {
        if (!(__children is null))
            return true;
        if (node.children || createEmpty) {
            if (node.children is null)
                node.children = Array[Entry]();
            __makeChildren();
            for (iter :on node.children)
                __children[iter.index] = CachedEntry(__cache, iter.elem());
            return true;
        } else {
            return false;
        }
    }

    CachedEntry __getChildEntry(uint index) {
        CachedEntry cachedEntry;
        if (!__populateChildren(false))
            return null;

        cachedEntry = __children[index];
        if (!cachedEntry) {
            entry := node.children[index];

            node := _getCachedNode(__cache, entry.hash);
            if (!node) {
                error `Unable to load node $(entry.hash)`;
                return null;
            }

            cachedEntry = __children[index] =
                CachedEntry(entry, node);
        }

        return cachedEntry;
    }

    ## Get a child by its index.  Throw IndexError if the index is out of
    ## range.  Return null if we are unable to retrieve the node.
    CachedNode getChild(uint index) {
        cachedEntry := __getChildEntry(index);
        return cachedEntry.getNode();
    }

    ## Returns the name of a child.
    String getChildName(uint index) {
        cachedEntry := __getChildEntry(index);
        return cachedEntry.getName();
    }

    ## Get the child with the given name.  Returns null if there is no such
    ## child.
    @final CachedNode getChild(String name) {
        if (!__populateChildren(false))
            return null;
        child := __children.get(name);
        if (!child)
            return null;
        else
            return child.getNode();
    }


    @final String getContents() {
        return node.contents;
    }

    ## Returns the total size of the node.
    @final uint64 getSize() {
        # TODO: Store this information in the node as well as its children.
        if (!(node.contents is null)) {
            return node.contents.size;
        } else if (node.children) {
            uint64 sum;
            for (child :in node.children)
                sum += uint64(child.size);
            return sum;
        } else {
            return 0;
        }
    }

    ## Mark the node as diry and do the same for all parent nodes.
    void __markDirty() {

        # Find the child in the parent and invalidate all instances.
        if (parent) {
            for (child :in parent.__children) {
                if (child.entry is this || child.getDigest() == digest)
                    child.setDigest(null);
            }
        }

        dirty = true;
        if (parent) parent.__markDirty();
    }

    void __recordChildChange(CachedNode child, Change childChange) {

        # Find the name of the child.
        String childName;
        for (c :in __children) {
            if (c.node is child)
                childName = c.getName();
        }

        @assert(childName);

        # Create a change for the child.
        change := Change();
        change.type = CHANGE_NESTED;
        change.name = childName;
        change.nested = childChange.toString();
        if (digest) {
            __cache.addChange(digest, change);
        } else {
            @assert(parent);
            parent.__recordChildChange(this, change);
        }

    }

    ## Record a change in the journal for this node or for the appropriate
    ## parent node if this node doesn't have a digest yet.
    void __recordChange(Change change) {
        # If we have a digest, we can create a change record against this
        # node.  If not, we have to recurse back to the first parent that has
        # a digest and apply the change to its journal.
        if (digest) {
            __cache.addChange(digest, change);
        } else {
            @assert(parent);
            parent.__recordChildChange(this, change);
        }
    }

    ## Internal add child method, which does everything but create a change
    ## record.
    CachedNode __addChild(String name, Node node) {
        child := CachedNode(__cache, null, node);
        child.parent = this;

        CachedEntry entry = {Entry(), child};
        entry.entry.name = name;

        __populateChildren(true);

        # Add the child.
        __children.add(entry);

        # Mark the node and the entire ancestor chain as dirty.
        __markDirty();

        return child;
    }

    ## Add a new child node with the specified name.
    CachedNode addChild(String name, Node node) {
        child := __addChild(name, node);

        # Record the change in the journal.
        change := Change();
        change.type = CHANGE_ADD_CHILD;
        change.name = name;
        change.node = node;
        __recordChange(change);

        return child;
    }

    ## Delete the named child and return true, or return false if the child
    ## doesn't exist.
    bool deleteChild(String name) {
        if (!__populateChildren(true))
            return false;
        if (!__children.delete(name))
            return false;

        # Record the change.
        change := Change();
        change.type = CHANGE_DELETE_CHILD;
        change.name = name;
        __recordChange(change);

        return true;
    }

    ## Returns the number of children in the node.
    uint getChildCount() {
        return node.children ? node.children.count() : 0;
    }

    void __write(uint64 pos, Buffer data) {
        if (node.children is null && node.contents is null) {
            # The trivial case: build a tree or add a node depending on the
            # size of the data.
            if (pos + data.size <= __cache.maxContentSize) {
                if (pos) {
                    AppendBuffer buf = {pos + data.size};
                    buf.move(0, data);
                    node.contents = String(buf, true);
                } else {
                    node.contents = String(data);
                }
            } else {
                throw Exception('tree building not implemented yet');
            }
        } else if (!(node.contents is null)) { #
            # This is a pristine content-only node.
            # TODO: add " && !digest" to the condition above once we have a
            # tree.
            if (pos + data.size > __cache.maxContentSize) {
                # This buffer would make the node greater than the maximum
                # size.
                throw Exception('splitting not implemented yet.');
            } else {
                # This is the easy case.  We can just inject the data into the
                # contents.
                dataEnd := pos + data.size;
                AppendBuffer buf = {node.contents.size > dataEnd ?
                                    node.contents.size :
                                    dataEnd};
                buf.extend(node.contents.substr(0, pos));
                buf.extend(data);
                if (node.contents.size > dataEnd)
                    buf.extend(node.contents.substr(dataEnd));
                node.contents = String(buf, true);
            }
        } else {
            throw Exception('Full monty not supported yet.');
        }
    }

    void write(uint64 pos, Buffer data) {
        __write(pos, data);

        change := Change();
        change.type = CHANGE_WRITE;
        @assert(pos < 0x100000000);
        change.pos = int32(pos);
        change.data = String(data);
        __recordChange(change);
    }

    void __resize(uint64 newSize) {
        if (node.contents is null) {
            # If the new size is zero, we don't have to do anything.
            # Otherwise, create a new empty contents buffer.
            if (newSize) {
                ManagedBuffer buf = {newSize};
                for (uint64 i = 0; i < newSize; ++i)
                    buf.buffer[i] = 0;
                buf.size = uintz(newSize);
                node.contents = String(buf, true);
            }
        } if (node.contents.size > newSize) {
            node.contents = node.contents.substr(0, newSize);
        } else {
            # Create a new buffer and move the existing contents to it.
            AppendBuffer buf = {newSize};
            buf.move(0, node.contents);

            # Clear the rest of the buffer.
            for (uint64 i = buf.size; i < newSize; ++i)
                buf.buffer[i] = 0;
            buf.size = newSize;

            # Use it for contents.
            node.contents = String(buf, true);
        }
    }

    ## Resize contents to the specified size.  Truncate the node if less than
    ## the existing size, pad with zeroes if greater than the existing size.
    ## Returns false if unable to accomodate.
    bool resize(uint64 newSize) {
        # TODO: rewrite to use chunking.
        if (node.children is null) {
            __resize(newSize);

            change := Change();
            change.type = CHANGE_RESIZE;
            change.newSize = int32(newSize);
            __recordChange(change);

            return true;
        } else {
            error `Can only do resize on content nodes at this time`;
            return false;
        }
    }

    ## Commit all outstanding changes in the tree.  Returns the new digest.
    String commit() {
        # If our digest is up to date, we don't need to do anything.
        if (!dirty)
            return digest;

        if (__children) {
            # Commit all dirty children and reconstruct the child list for the
            # underlying node.

            # Create a new list of children for the node.
            node.children = Array[Entry](__children.count());

            for (child :in __children) {
                if (!child.getDigest())
                    child.setDigest(dig := child.node.commit());
                node.children.append(child.entry);
            }
        } else {
            # Make sure our node also has no children.
            node.children = null;
        }

        # Commit the node itself and clear the journal.
        orgDigest := digest;
        if (__children) {
            for (child :in __children) {
                if (!child.entry.hash)
                    throw AssertionError(
                        FStr() `Invalid hash for $(child.getName())`
                    );
                else if (!child.entry.name)
                    throw AssertionError(FStr() `Child with no name`);
            }
        }

        digest = __cache.storeNode(node);
        dirty = false;
        __cache.clearJournal(orgDigest);

        return digest;
    }

    void __applyChange(Change change) {
        if (change.type == CHANGE_ADD_CHILD) {
            __addChild(change.name, change.node);
        } else if (change.type == CHANGE_DELETE_CHILD) {
            __children.delete(change.name);
        } else if (change.type == CHANGE_NESTED) {

            # Get the requested child.
            child := __children.get(change.name);
            if (!child) {
                error I`Change for child $(change.name) of node $digest \
                        found, but child doesn't exist.`;
                return;
            }

            # Extract the neste change and apply it to the child.
            Change nested = {};
            readMessageFromString(nested, change.nested);
            child.getNode().__applyChange(nested);
        } else if (change.type == CHANGE_WRITE) {
            __write(uint64(change.pos), change.data);
        } else if (change.type == CHANGE_RESIZE) {
            __resize(uint64(change.newSize));
        } else {
            error `Unrecognized change type $(change.type)`;
        }
    }

    ## Replay all journal entries against the node.  If the node doesn't have
    ## a digest or there are no changes, does nothing.
    void replayJournal() {

        # Don't do this for a node that hasn't been saved.
        if (!digest)
            return;

        changes := __cache.getJournalEntries(digest);
        if (!changes)
            return;

        # Apply all of the changes in sequence.
        for (change :in changes)
            __applyChange(change);
    }

    uint read(uint64 pos, WriteBuffer buffer) {
        if (node.contents) {

            # We've got contents, read from there.
            if (pos < node.contents.size) {
                uint size;
                if (buffer.cap >= node.contents.size - pos)
                    size = node.contents.size - pos;
                else
                    size = buffer.cap;
                buffer.move(0, node.contents.buffer + pos,
                            size
                            );
                buffer.size = size;
            } else {
                buffer.size = 0;
            }
        } else if (node.children) {

            uint64 pos;
            WriteBuffer frame = {null, 0, 0};
            for (child :in __children) {
                if (pos < child.getSize()) {

                    # Delegate the operation to the child

                    # Make the frame buffer the remaining part of the input
                    # buffer.
                    frame.buffer = buffer.buffer + frame.size;
                    frame.cap = buffer.cap - frame.size;

                    # Pass this off to the child.
                    buffer.size += child.getNode().read(pos, frame);
                    if (buffer.size == buffer.cap)
                        break;
                }

                # Fix the position to be relative to the start of the next
                # child.
                pos -= child.getSize();
            }
        }

        return buffer.size;
    }

    void formatTo(Formatter out) {
        indent := Indenter.wrap(out);
        indent `CachedNode {\n`;
        ++indent;
        indent I`hash: $(digest ? hex(digest) : 'null')
                 contents: $(!(node.contents is null) ?
                                node.contents.getRepr() :
                                'null'
                             )
                 entries: $__children\n`;
        --indent;
        indent `}`;
    }
}

CachedNode _getCachedNode(Cache cache, String digest) {
    node := CachedNode(cache, digest, cache.getNode(digest));
    node.replayJournal();
    return node;
}
