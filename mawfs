#!/usr/local/bin/crack

import crack.ascii hex, radix;
#import crack.exp.fuse fuseMain = main, LockedFilesystem, NodeImpl;
import crack.lang InvalidArgumentError, SystemError;

import crack.fs cwd, makePath, Path;
import crack.sys argv, exit;
import crack.io cin, cout, cerr, FStr, Reader;

import crack.cont.array Array;
import crack.lang AppendBuffer;

import mawfs.blockstore hashFile, unhex, ChunkStore, FSInfo, BLOCK_SIZE;

#class DirNode : NodeImpl {
#    @static DirNode readFrom(Reader src) {

#void mount(String backing, String mountPoint) {
#
#    backingRoot := makePath(backing);
#    fuseMain(StringArray!['<mawfs>', mountPoint], LockedFilesystem(backingRoot));
#    # xxxx finish writing xxxxx
#}

const TESTPW := 'FooBar-boguspassFooBar-boguspass';

void usage() {
    cerr I`\
        Usage:
            mawfs hash <filename> ...
                Show file hashes.
            mawfs mount <backing-store> <mount-point>
                Mount a filesystem.
            mawfs storechunk <src-file>
                Reads data from <src-file> and writes it to the filesystem
                under its digest name.
            mawfs loadchunk <hash>
                Loads a chunk based on its digest and writes it to standard
                output.
        `;
}

## Returns a reader for the file specified by 'filename'.  If 'filename' is
## "-", returns a reader for standard input.
Reader getReader(String filename) {
    if (filename == '-') {
        return cin;
    } else {
        return makePath(filename).reader();
    }
}

# The main function, which is a command dispatcher.
void main() {
    if (argv.count() < 2) {
        usage();
        exit(1);
    }

    try {
        cmd := argv[1];
        if (cmd == 'hash') {
            if (argv.count() < 3) {
                cerr `No files specified\n`;
                exit(1);
            }
            for (file :in argv.subarray(2))
                cout `$(hex(hashFile(makePath(file)))) $file\n`;
        } else if (cmd == 'mount') {
            if (argv.count() != 4) {
                cerr `Usage: mawfs mount <backing-store> <mount-point>\n`;
                exit(1);
            }

#            mount(argv[2], argv[3]);
        } else if (cmd == 'storechunk') {
            if (argv.count() != 3) {
                cerr `Usage: mawfs storechunk <src-file>`;
                exit(1);
            }

            # Read the file contents.
            src := getReader(argv[2]);
            contents := AppendBuffer(BLOCK_SIZE);
            while (data := src.read(BLOCK_SIZE))
                contents.extend(data);

            store := ChunkStore(cwd, FSInfo(TESTPW));
            digest := store.store(contents);
            cout `$(hex(digest))\n`;
        } else if (cmd == 'loadchunk') {
            if (argv.count() != 3) {
                cerr `Usage: mawfs loadchunk <hash>\n`;
                exit(1);
            }

            store := ChunkStore(cwd, FSInfo(TESTPW));
            chunk := store.load(unhex(argv[2]));
            if (!chunk)
                cerr `Chunk $(argv[2]) not found\n`;
            else
                cout `$(chunk.contents)`;
        } else {
            cerr `Unknown command: $cmd\n`;
            usage();
            exit(1);
        }
    } catch (SystemError ex) {
        cerr `$(ex.text)\n`;
    } catch (InvalidArgumentError ex) {
        cerr `$(ex.text)\n`;
    }
}

main();
