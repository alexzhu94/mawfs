# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.fs cwd, makePath, Path;
import crack.io cerr, FStr;
import crack.lang Exception;
import crack.process Process, CRK_PROC_EXITED;
import crack.strutil StringArray;
import crack.sys argv;
import crack.runtime sleep;

@import crack.ann assert, impl;

cwd.set(makePath(argv[0]).parent().parent());

class TestFailure : Exception {
    oper init(String text) : Exception(text) {}
}

@abstract class TestCase {

    ## Deletes the backing directory and returns it.
    Path deleteBacking() {
        backing := makePath('backing');
        if (backing.exists())
            backing.deleteTree();
        return backing;
    }

    void setUp() {
        deleteBacking().makeDir();
        fsDir := makePath('fs');
        if (!fsDir.exists())
            fsDir.makeDir();

        rc := Process(StringArray!['./mawfs', 'run', 'backing', 'fs']).run();
        if (rc != CRK_PROC_EXITED)
            throw Exception('Failed in startup');
    }

    @abstract void run();

    void tearDown() {
        rc := Process(StringArray!['fusermount', '-u', 'fs']).run();
        if (rc != CRK_PROC_EXITED)
            cerr `fusermount failed`;
        deleteBacking();
    }

    void exec() {
        cerr `$(this.class.name)...`;
        try {
            setUp();
            run();
            cerr `ok\n`;
        } catch (TestFailure ex) {
            cerr `FAILED\n\t$(ex.text)\n`;
        } catch (Exception ex) {
            sleep(1);
            cerr `FAILED\n`;
            cerr `$ex\n`;
        }
        tearDown();
    }

    ## Get the names of all files in 'dir', if 'dir' is null, get all files
    ## in the root of fs.
    StringArray getAllFiles(Path dir) {
        d := dir ? dir : makePath('fs');

        StringArray result = {};
        for (file :in d.children())
            result.append(file.getName());

        return result;
    }
}

class EmptyDirTest : TestCase {
    void run() {
        if (files := getAllFiles(null))
            throw TestFailure(FStr() `got files in empty dir: $files`);
    }
}
EmptyDirTest().exec();

class FileTest : TestCase {
    void run() {
        foo := makePath('fs')/'foo';
        foo.writer().write('this is some data');
        if ((files := getAllFiles(null)) != StringArray!['foo'])
            throw TestFailure(
                FStr() `Didn't get created file 'foo', got $files`
            );

        if ((content := foo.readAll()) != 'this is some data')
            throw TestFailure(FStr() `Incorrect file contents: [$content]\n`);
    }
}
FileTest().exec();

/*
String readNode(Node node, int pos, int size) {
    ManagedBuffer buf = {size};
    BlockIter iter = {node};
    iter.setPos(pos);
    iter.read(buf);
    return String(buf, true);
}

int writeNode(Node node, int pos, Buffer data) {
    BlockIter iter = {node};
    iter.setPos(pos);
    return iter.write(data);
}

Stat copyStat(Stat other) {
    if (other is null)
        return null;
    Stat result = Stat();
    result.st_dev = other.st_dev;
    result.st_ino = other.st_ino;
    result.st_mode = other.st_mode;
    result.st_nlink = other.st_nlink;
    result.st_uid = other.st_uid;
    result.st_gid = other.st_gid;
    result.st_rdev = other.st_rdev;
    result.st_blksize = other.st_blksize;
    result.st_blocks = other.st_blocks;
    result.st_atime = other.st_atime;
    result.st_mtime = other.st_mtime;
    result.st_ctime = other.st_ctime;

    return result;
}

class Info {
    String filename;
    Stat stat;

    oper init(String filename, Stat stat) :
        filename = filename,
        stat = copyStat(stat) {
    }

    oper del() {
        free(stat);
    }
}

Entry e(String filename) {
    result := Entry();
    result.name = filename;
    return result;
}

Array[Info] filled = {};

int filler(voidptr buf, byteptr filename, Stat stat, uintz something) {
    filled.append(Info(String(filename), stat));
    return 0;
}

###### BEGIN TESTS

if (true) {
    node := Node();
    node.contents = 'this is a test';

    iter := BlockIter(node);
    @assert(readNode(node, 0, 4) == 'this');
    @assert(readNode(node, 5, 4) == 'is a');
    @assert(readNode(node, 10, 10) == 'test');
}

if (true) {
    node := Node();
    node.children = Array[Entry]![e('foo'), e('bar')];
    node.contents = 'this is some data';

    MAWFSNode fuseNode = {MemNodeStore(), node};
    @assert(!fuseNode.readdir(null, null, filler, 0, null));
    @assert(filled[0].filename == '.');
    @assert(filled[1].filename == '..');
    @assert(filled[2].filename == 'foo');
    @assert(filled[3].filename == 'bar');
    @assert(filled[3].stat.st_mode == 040777);

    ManagedBuffer buf = {64};
    @assert(fuseNode.read(null, buf.buffer, buf.cap, 0, null) == 17);
    buf.size = 17;
    @assert(String(buf, true) == 'this is some data');
}

if (true) {
    node := Node();
    MAWFSNode fuseNode = {MemNodeStore(), node};

    @assert(writeNode(node, 0, 'some data') == 9);
    @assert(readNode(node, 0, 9) == 'some data');
    @assert(writeNode(node, 5, 'pig') == 3);
    @assert(readNode(node, 0, 1024) == 'some piga');
}

if (true) {
    MAWFSNode fs = {MemNodeStore(), Node()};
    ManagedBuffer buf = {8};
    Context ctx = {'/foo', fs};

    data := 'data';
    @assert(fs.write(ctx, data.buffer, data.size, 0, null) == 4);
    @assert(fs.write(ctx, data.buffer, data.size, 4, null) == 4);
    @assert((buf.size = fs.read(ctx, buf.buffer, 3, 0, null)) == 3);
    @assert(buf == 'dat');
    @assert((buf.size = fs.read(ctx, buf.buffer, 10, 3, null)) == 5);
    @assert(buf == 'adata');
}

# Creating files.
if (true) {
    nodeStore := MemNodeStore();
    root := Node();
    nodeStore.storeRoot(nodeStore.storeNode(root));
    MAWFSNode fs = {nodeStore, root};
    Context ctx = {'/foo', fs};
    @assert(fs.create(ctx, 0, null) == 0);
    children := root.children;
    @assert(children.count() == 1);
    @assert(children[0].name = 'foo');
    @assert(!nodeStore.getNode(children[0].hash).mode);

    # Verify that we can reproduce this from the node store.
    root = nodeStore.getRoot();
    children = root.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'foo');

    # Verify that we overwrite the existing child and don't add a new one.
    # (I'm not sure this behavior is correct, I think it might be appropriate
    # to make this case an error and require a truncate).
    @assert(fs.create(ctx, 0, null) == 0);
    @assert(children.count() == 1);
    @assert(children[0].name = 'foo');
}

# Create nested file.
if (true) {
    nodeStore := MemNodeStore();
    root := Node();
    nodeStore.storeRoot(nodeStore.storeNode(root));
    MAWFSNode fs = {nodeStore, root};
    Context ctx = {'/foo', fs};

    @assert(fs.mkdir(ctx, 0) == 0);
    children := root.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'foo');

    foo := ctx.lookUp();
    ctx = Context('/foo/bar', fs);
    @assert(foo.create(ctx, 0, null) == 0);

    # Read back all the way from the node store.
    root = nodeStore.getRoot();
    children = root.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'foo');

    dirNode := nodeStore.getNode(children[0].hash);
    @assert(dirNode.mode == MODE_DIR);

    children = dirNode.children;
    @assert(children.count() == 1);
    @assert(children[0].name == 'bar');
}

# Truncate.
if (true) {
    nodeStore := MemNodeStore();
    root := Node();
    nodeStore.storeRoot(nodeStore.storeNode(root));
    MAWFSNode fs = {nodeStore, root};
    Context ctx = {'/foo', fs};

    @assert(fs.create(ctx, 0, null) == 0);
    text := 'this is text';
    foo := ctx.lookUp();
    @assert(foo.write(ctx, text.buffer, text.size, 0, null));
    @assert(foo.truncate(ctx, 4) == 0);

    root = nodeStore.getRoot();
    fs.setRep(root);
    ManagedBuffer temp = {10};
    foo = ctx.lookUp();
    rc := temp.size = foo.read(ctx, temp.buffer, temp.cap, 0, null);
    @assert(foo.read(ctx, temp.buffer, temp.cap, 0, null) == 4);

    foo.truncate(ctx, 0);
    root = nodeStore.getRoot();
    fs.setRep(root);
    foo = ctx.lookUp();
    rc = temp.size = foo.read(ctx, temp.buffer, temp.cap, 0, null);
    @assert(foo.read(ctx, temp.buffer, temp.cap, 0, null) == 0);
}
*/
