# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import crack.enc.base64 altEncode;  # For debugging hash values.
import crack.cont.array Array;
import crack.hash.sha256 SHA256;
import crack.io cerr, FStr, StringWriter;
import crack.protobuf ProtoWriter;
import crack.cont.hashmap HashMap;
import crack.lang AppendBuffer, ManagedBuffer;
import crack.logger debug, setLogLevel, DEBUG;
import mawfs.blockstore Entry, Node, NodeStore, MODE_DIR;
import mawfs.memstore MemNodeStore;
import mawfs.cache Cache, CachedNode;
import mawfs.testutil copy, makeRandomData;

@import crack.ann assert, impl;

Node makeFileNode(String contents, int32 mode) {
    node := Node();
    node.contents = contents;
    node.size = contents ? node.contents.count() : 0;
    node.mode = mode;

    return node;
}

Node makeDirNode() {
    node := Node();
    node.mode = MODE_DIR;
    return node;
}


AppendBuffer readAll(CachedNode cached) {
    AppendBuffer readData = {4096};
    ManagedBuffer temp = {256};
    uint64 pos;
    while (rc := cached.read(pos, temp)) {
        pos += rc;
        readData.extend(temp);
    }
    return readData;
}

setLogLevel(DEBUG);

node := makeFileNode('contents of foo', 0);

nodeStore := MemNodeStore();
digest := nodeStore.storeNode(node);

root := Node();
node.children = Array[Entry]();
entry := Entry();
entry.hash = digest;
entry.name = 'foo';
root.children_append(entry);

digest = nodeStore.storeNode(root);
nodeStore.storeRoot(digest);

# NOTE: We should be passing a commit digest to this, but the root digest
# (or any other non-empty string) should work just as well for this exercise.
cache := Cache(nodeStore, 'master', digest);
cachedRoot := CachedNode(cache, digest, root);
cachedNode := cachedRoot.getChild(0);
@assert(cachedNode.getContents() == 'contents of foo');

# Do it again, make sure this works right if the object is loaded.
cachedNode = cachedRoot.getChild(0);
@assert(cachedNode.getContents() == 'contents of foo');

# Add a child.
node = makeFileNode('contents of bar', 0);
cachedRoot.addChild('bar', node);

@assert(cachedRoot.getChild(0).getContents() == 'contents of bar');
@assert(cachedRoot.getChild(1).getContents() == 'contents of foo');

# Verify that the insertion order is correct.
cachedRoot.addChild('cat', makeFileNode('cat contents', 0));
cachedRoot.addChild('alpha', makeFileNode('alpha contents', 0));
cachedRoot.addChild('zeta', makeFileNode('zeta contents', 0));

# Rewrite "foo" to test overwrites.
cachedRoot.addChild('foo', makeFileNode('foo contents', 0));
cachedRoot.addChild('zzdir', makeDirNode());
zzdir := cachedRoot.getChild(5);
zzdir.addChild('zzfile', makeFileNode('zzfile contents', 0));
zzdir.addChild('deleted', makeFileNode('deleted file', 0));
zzdir.deleteChild('deleted');

# Test a write in a subdirectory (propagation code was broken).
zzfile := cachedRoot.getChild('zzdir').getChild('zzfile');
zzfile.write(7, 'moar data');

cachedRoot.addChild('zzzshrunk', makeFileNode('original file', 0));
cachedRoot.getChild('zzzshrunk').resize(5);
@assert(cachedRoot.getChild('zzzshrunk').getContents() == 'origi');

cachedRoot.addChild('zzzenlarged', makeFileNode('original file', 0));
cachedRoot.getChild('zzzenlarged').resize(16);
@assert(cachedRoot.getChild('zzzenlarged').getContents() ==
         'original file\0\0\0'
        );

cachedRoot.addChild('zzztruncated', makeFileNode('original file', 0));
cachedRoot.getChild('zzztruncated').resize(0);
@assert(!cachedRoot.getChild('zzztruncated').getContents());

cachedRoot.addChild('zzzwasempty', makeFileNode(null, 0));
cachedRoot.getChild('zzzwasempty').resize(5);
@assert(cachedRoot.getChild('zzzwasempty').getContents() == '\0\0\0\0\0');

void verifyContents() {
    @assert(cachedRoot.getChild(0).getContents() == 'alpha contents');
    @assert(cachedRoot.getChild(1).getContents() == 'contents of bar');
    @assert(cachedRoot.getChild(2).getContents() == 'cat contents');
    @assert(cachedRoot.getChild(3).getContents() == 'foo contents');
    @assert(cachedRoot.getChild(4).getContents() == 'zeta contents');
    @assert(cachedRoot.getChild(5).getMode() == MODE_DIR);
    @assert(cachedRoot.getChild(5).getChild(0).getContents() ==
            'zzfile moar data');
    @assert(cachedRoot.getChild(5).getChildCount() == 1);
    @assert(cachedRoot.getChild('zzzshrunk').getContents() == 'origi');
    @assert(cachedRoot.getChild('zzzenlarged').getContents() ==
             'original file\0\0\0'
            );
    @assert(!cachedRoot.getChild('zzztruncated').getContents());
    @assert(cachedRoot.getChild('zzzwasempty').getContents() == '\0\0\0\0\0');
}

# TODO: test committing changes at this point as well as after replaying them
# back from the cache.

# Test reconstructing changes from cache.
cachedRoot = CachedNode(cache, digest, nodeStore.getRoot());
cachedRoot.replayJournal();
verifyContents();

# Test committing changes.
nodeStore.storeRoot(digest = cachedRoot.commit());
cachedRoot = CachedNode(cache, digest, nodeStore.getRoot());
verifyContents();

# Test a write.
cachedRoot.addChild('written', Node());
cached := cachedRoot.getChild('written');
cached.write(0, 'first data');
if (true) {
    buf := ManagedBuffer(1024);
    cached.read(0, buf);
    @assert(buf == 'first data');
}
@assert(cached.getSize() == 10);

# Test appending children.
if (true) {
    cerr `appending master\n`;
    cache := Cache(nodeStore, 'master', digest);
    cache.maxChildren = 4;
    CachedNode root = {cache, digest, Node()};

    AppendBuffer originalData = {4096};
    for (int i = 0; i < 100; ++i) {
        line := FStr() `this is $i\n`;
        root.append(line);
        originalData.extend(line);
        size := root.verify();
    }

    @assert(readAll(root) == originalData);
}

# Case 1: verify that we can insert objects into an empty node.
if (true) {
    cerr `inserting objects into an empty node\n`;
    cache := Cache(nodeStore, 'master', digest);
    CachedNode root = {cache, digest, Node()};
    randomData := makeRandomData();
    root.write(0, randomData);

    # Make sure we have a nice tree.
    root.verify();
}

# TODO: verify that we can insert at an offset in an empty node and that we
# get filled in with zeroes.

# Write a large amount of random data into the middle of a node with contents.
if (true) {
    cerr `write random data into the middle of a content node.\n`;
    cache := Cache(nodeStore, 'master', digest);
    CachedNode root = {cache, digest, Node()};
    root.node.contents = 'this is a test';

    randomData := String(makeRandomData(), true);
    root.write(8, randomData);

    @assert(readAll(root) == 'this is ' + randomData);
    root.verify();
}

# Write into the middle of a node with contents.
if (true) {
    cerr `write simple data into the middle of a content node.\n`;
    cache := Cache(nodeStore, 'master', digest);
    CachedNode root = {cache, digest, Node()};
    root.node.contents = 'this is a test';

    root.write(5, 'crzy');

    @assert(readAll(root) == 'this crzy test');
    root.verify();
}

# Write data after the end of a node with children.
if (true) {
    cerr `write data after the end of a node with children\n`;
    cache := Cache(nodeStore, 'master', digest);
    CachedNode root = {cache, digest, Node()};

    # populate an empty node.
    data := String(makeRandomData(), true);
    root.write(0, data);

    # Write beyond the end.
    root.write(data.size + 1000, data);

    @assert(readAll(root) == data + String(1000, 0) + data);
}

# Write a large amount of random data into a node with children.
if (false) {
    cerr `write random data into a node with children\n`;
    cache := Cache(nodeStore, 'master', digest);
    CachedNode root = {cache, digest, Node()};

    # populate an empty node.
    data := String(makeRandomData(), true);
    root.write(0, data);

    # Insert random data somewhere.
    root.write(25000, data);
}

# TODO:
#   - create a directory and then a child node to verify that when we do
#     addChild() on a node without a digest the change propagates back to the
#     parent.

cerr `ok\n`;

