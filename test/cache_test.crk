
import crack.ascii hex;  # For debugging hash values.
import crack.cont.array Array;
import crack.hash.sha256 SHA256;
import crack.io cerr, StringWriter;
import crack.protobuf ProtoWriter;
import crack.cont.hashmap HashMap;
import crack.logger debug, setLogLevel, DEBUG;
import mawfs.blockstore Entry, Node, NodeStore, MODE_DIR;
import mawfs.cache Cache, CachedNode;

@import crack.ann assert, impl;

class FakeNodeStore @impl NodeStore {
    HashMap[String, Node] __nodes = {};
    HashMap[String, Array[String]] __journal = {};
    String __root;

    String __digest(Node node) {
        # Construct a digest from the object contents.
        StringWriter temp = {};
        ProtoWriter pw = {temp};
        node.serialize(pw);
        hasher := SHA256();
        hasher.update(temp.string());
        return hasher.digest();
    }

    String storeNode(Node node) {
        __nodes[result := __digest(node)] = node;
        return result;
    }

    Node getNode(String digest) {
        return __nodes.get(digest);
    }

    Node getRoot() {
        return getNode(__root);
    }

    void storeRoot(String digest) {
        __root = digest;
    }

    void writeToJournal(String digest, String contents) {
        arr := __journal.get(digest);
        if (!arr)
            __journal[digest] = arr = Array[String]();
        arr.append(contents);
    }

    Array[String] getJournalEntries(String digest) {
        return __journal.get(digest);
    }

    void deleteJournal(String digest) {
        if (__journal.hasKey(digest))
            __journal.delete(digest);
    }
}

Node makeFileNode(String contents, int32 mode) {
    node := Node();
    node.contents = contents;
    node.size = int32(node.contents.count());
    node.mode = mode;

    return node;
}

Node makeDirNode() {
    node := Node();
    node.mode = MODE_DIR;
    return node;
}

setLogLevel(DEBUG);

node := makeFileNode('contents of foo', 0);

nodeStore := FakeNodeStore();
digest := nodeStore.storeNode(node);

root := Node();
node.children = Array[Entry]();
entry := Entry();
entry.hash = digest;
entry.name = 'foo';
root.children.append(entry);

digest = nodeStore.storeNode(root);
nodeStore.storeRoot(digest);

cache := Cache(nodeStore);
cachedRoot := CachedNode(cache, digest, root);
cachedNode := cachedRoot.getChild(0);
@assert(cachedNode.getContents() == 'contents of foo');

# Do it again, make sure this works right if the object is loaded.
cachedNode = cachedRoot.getChild(0);
@assert(cachedNode.getContents() == 'contents of foo');

# Add a child.
node = makeFileNode('contents of bar', 0);
cachedRoot.addChild('bar', node);

@assert(cachedRoot.getChild(0).getContents() == 'contents of bar');
@assert(cachedRoot.getChild(1).getContents() == 'contents of foo');

# Verify that the insertion order is correct.
cachedRoot.addChild('cat', makeFileNode('cat contents', 0));
cachedRoot.addChild('alpha', makeFileNode('alpha contents', 0));
cachedRoot.addChild('zeta', makeFileNode('zeta contents', 0));

# Rewrite "foo" to test overwrites.
cachedRoot.addChild('foo', makeFileNode('foo contents', 0));
cachedRoot.addChild('zzdir', makeDirNode());
zzdir := cachedRoot.getChild(5);
zzdir.addChild('zzfile', makeFileNode('zzfile contents', 0));

void verifyContents() {
    @assert(cachedRoot.getChild(0).getContents() == 'alpha contents');
    @assert(cachedRoot.getChild(1).getContents() == 'contents of bar');
    @assert(cachedRoot.getChild(2).getContents() == 'cat contents');
    @assert(cachedRoot.getChild(3).getContents() == 'foo contents');
    @assert(cachedRoot.getChild(4).getContents() == 'zeta contents');
    @assert(cachedRoot.getChild(5).getMode() == MODE_DIR);
    @assert(cachedRoot.getChild(5).getChild(0).getContents() ==
            'zzfile contents');
}

# TODO: test committing changes at this point as well as after replaying them
# back from the cache.

# Test reconstructing changes from cache.
cachedRoot = CachedNode(cache, digest, nodeStore.getRoot());
cachedRoot.replayJournal();
verifyContents();

# Test committing changes.
nodeStore.storeRoot(cachedRoot.commit());
cachedRoot = CachedNode(cache, digest, nodeStore.getRoot());
verifyContents();

# TODO:
#   - create a directory and then a child node to verify that when we do
#     addChild() on a node without a digest the change propagates back to the
#     parent.

cerr `ok\n`;